#ifndef _DATA_FLAGS_HPP
#define _DATA_FLAGS_HPP

/**
 * @file      flags.hpp
 *
 * @version   1.0-1b
 *
 * @author    xanthos@mail.ntua.gr <br>
 *            danast@mail.ntua.gr
 *
 * @date      November, 2014
 *
 * @brief     A classes to represent possible data flags.
 *
 * @details   This file declares a class (DataFlag) used to mark any GNSS observation,
 *            with a (or a combination of) all posible states (e.g. outlier, ...).
 *            This class should be generic enough to describe any state / state-combination
 *            data can be in.
 *
 * @copyright No COPYRIGHT whatsoever.
 *
 * <b><center><hr>
 * National Technical University of Athens <br>
 *      Dionysos Satellite Observatory     <br>
 *        Higher Geodesy Laboratory        <br>
 *      http://dionysos.survey.ntua.gr
 * </center></b>
 */

#include <bitset>

namespace ngpt {

/**
 * @details A class to hold flags for an observation. A flag can hold multiple
 *          information, depending on the bits that are set. The meaning of the bits
 *          is described by the following table:
 *          Bit Nr | Meaning
 *        ---------|------------------
 *               0 | skip
 *               1 | outlier
 *               2 | cycle slip
 *               3 | absent / null
 *               4 | (gps-specific) collected via squaring technique; see @cite rnx211
 *
 * @warning Bit number #4 corresponds to halh-wavelength and is set by the RINEX file.
 *          The WAVELENGTH FACT L1/2 header record defining the factor, the carrier
 *          wavelength has to be divided with for ambiguity resolution, has been
 *          introduced because of receivers generating GPS phase observations under
 *          antispoofing with one cycle corresponding to half the carrier wavelength
 *          only (squaring technique). Galileo observables will not be generated by
 *          squaring. We therefore define the WAVELENGTH FACT L1/2 header record to be
 *          valid for L1 and L2 GPS phase observables only. All wavelength factors default
 *          to 1. This header record can therefore be declared to be optional.
 */
class DataFlag {

  public:

    /*! Default constructor. Constructs a bitset with all bits set to zero. */
    DataFlag(){};

    /**
     * @brief         Reset (set to false) some or all bits. 
     * @param[in] pos (optional) If not provided, all bits are reset (set to zero).
     *                Else, only the bit at position \c pos is reset.
     * @warning       No check is performed to see if the input parameter \c pos
     *                is out of range!
     */
    inline void reset (size_t pos=100) {
      if (pos==100) mbits.reset ();
      else mbits.reset (pos);
    }

    inline bool is_skip()      {return mbits[0];}
    inline bool is_outlier()   {return mbits[1];}
    inline bool is_cycleslip() {return mbits[2];}
    inline bool is_absent()    {return mbits[3];}

    inline void set_skip()      {mbits[0]=true;}
    inline void set_outlier()   {mbits[1]=true;}
    inline void set_cycleslip() {mbits[2]=true;}
    inline void set_absent()    {mbits[3]=true;}

  private:

    std::bitset<5> mbits;

}; // end DataFlag class

}; // end namespace

#endif
